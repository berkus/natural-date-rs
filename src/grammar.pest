/// Whitespace or tab
WHITESPACE = _{ " " | "\t" }

/// Parses a full date expression, which could be a relative date,
/// specific day and time, or a future time phrase.
/// - Examples: "next Monday", "tomorrow at 3:00 PM", "in 2 days"
date_expression = { SOI ~ (relative_day_and_specific_time | relative_date | relative_term | specific_date_and_time | specific_day_and_time | specific_date | specific_day | specific_time | future_time) ~ EOI }

/// Parses relative day expressions combined with specific times, such as
/// "tomorrow at 4:00 PM".
relative_day_and_specific_time = { (relative_date | relative_term) ~ ^"at" ~ specific_time }

/// Parses expressions for relative dates, for example, "next Tuesday" or "last Friday".
relative_date = { next_or_last ~ specific_day }

/// Parses terms representing days relative to today, including "tomorrow",
/// "today", and "yesterday".
relative_term = { tomorrow | today | yesterday }

/// Parses expressions that specify both a day and a time, for example, "Wednesday
/// at 5:00 AM".
specific_day_and_time = { specific_day ~ ^"at" ~ specific_time }

/// Parses expressions that specify both a date and a time, for example, "2025.01.25
/// at 5:00 AM".
specific_date_and_time = { specific_date ~ ^"at" ~ specific_time }

/// Parses specific days of the week, with case-insensitive options.
specific_day = { monday | tuesday | wednesday | thursday | friday | saturday | sunday }

/// What can be used as date separator.
date_sep = { "-" | "." | "/" }

/// Parses a specific date expression, including year, month, and day.
specific_date = { year ~ date_sep ~ (month | month_name | month_short_name) ~ date_sep ~ day }

/// Parses a specific time expression, including hour, minute, and AM/PM
/// notation.
specific_time = { hour ~ ":" ~ minute ~ am_pm | hour ~ am_pm }

/// Parses future time expressions, such as "in 3 days" or "in 2 weeks".
future_time = { ^"in" ~ number ~ time_unit }

/// Matches relative terms for dates, allowing "next", "last", and "this"
/// qualifiers.
next_or_last = { next | last | this }

/// Parses a valid year value as a sequence of digits.
year = @{ ASCII_DIGIT+ }

/// Parses a valid month value as a sequence of digits.
month = @{ ASCII_DIGIT+ }

/// Parses a valid month value as a string month name.
month_name = { ^"january" | ^"february" | ^"march" | ^"april" | ^"may" | ^"june" | ^"july" | ^"august" | ^"september" | ^"october" | ^"november" | ^"december" }

/// Parses a valid month value as a shortened month name.
month_short_name = { ^"jan" | ^"feb" | ^"mar" | ^"apr" | ^"may" | ^"jun" | ^"jul" | ^"aug" | ^"sep" | ^"sept" | ^"oct" | ^"nov" | ^"dec" }

/// Parses a valid day value as a sequence of digits.
day = @{ ASCII_DIGIT+ }

/// Parses a valid hour value as a sequence of digits.
hour = @{ ASCII_DIGIT+ }

/// Parses a valid minute value as a sequence of digits.
minute = @{ ASCII_DIGIT+ }

/// Parses AM/PM markers, with case-insensitive options.
am_pm = { am | pm }

/// Parses a sequence of digits representing a number for time units.
number = @{ ASCII_DIGIT+ }

/// Matches time unit expressions in singular or plural form (for example, "day" or
/// "days").
time_unit = _{ minute_s | hour_s | day_s | week_s | month_s | year_s }

/// Day of the week: Monday or monday (case-insensitive).
monday = { ^"monday" }

/// Day of the week: Tuesday or tuesday (case-insensitive).
tuesday = { ^"tuesday" }

/// Day of the week: Wednesday or wednesday (case-insensitive).
wednesday = { ^"wednesday" }

/// Day of the week: Thursday or thursday (case-insensitive).
thursday = { ^"thursday" }

/// Day of the week: Friday or friday (case-insensitive).
friday = { ^"friday" }

/// Day of the week: Saturday or saturday (case-insensitive).
saturday = { ^"saturday" }

/// Day of the week: Sunday or sunday (case-insensitive).
sunday = { ^"sunday" }

/// Relative term: Tomorrow or tomorrow (case-insensitive).
tomorrow = { ^"tomorrow" }

/// Relative term: Today or today (case-insensitive).
today = { ^"today" }

/// Relative term: Yesterday or yesterday (case-insensitive).
yesterday = { ^"yesterday" }

/// Relative direction term: Next or next (case-insensitive).
next = { ^"next" }

/// Relative direction term: This or this (case-insensitive).
this = { ^"this" }

/// Relative direction term: Last or last (case-insensitive).
last = { ^"last" }

/// Time of day marker: AM or am (case-insensitive).
am = { ^"am" }

/// Time of day marker: PM or pm (case-insensitive).
pm = { ^"pm" }

/// Singular or plural form of "minute".
minute_s = { ^"minutes" | ^"minute" }

/// Singular or plural form of "hour".
hour_s = { ^"hours" | ^"hour" }

/// Singular or plural form of "day".
day_s = { ^"days" | ^"day" }

/// Singular or plural form of "week".
week_s = { ^"weeks" | ^"week" }

/// Singular or plural form of "month".
month_s = { ^"months" | ^"month" }

/// Singular or plural form of "year".
year_s = { ^"years" | ^"year" }
